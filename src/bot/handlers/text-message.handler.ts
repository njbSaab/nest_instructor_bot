// src/bot/handlers/text-message.handler.ts
import { Injectable } from '@nestjs/common';
import axios from 'axios';
import { UsersService } from '../../users/users.service';
import { MenuService } from '../services/menu.service';

@Injectable()
export class TextMessageHandler {
  constructor(
    private readonly usersService: UsersService,
    private readonly menuService: MenuService,
  ) {}

  async handle(ctx: any, emailVerification: Map<number, { code: string; attempts: number }>): Promise<void> {
    const text = ctx.message?.text;
    if (!text) {
      console.log('[TextMessageHandler] –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞');
      return;
    }

    console.log(`[TextMessageHandler] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await this.usersService.findOrCreateUser(ctx.from);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è email
    if (user.state === 'awaiting_email') {
      if (!this.validateEmail(text)) {
        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email:');
        return;
      }

      const code = Math.floor(10000 + Math.random() * 90000).toString();

      try {
        const response = await axios.post('http://localhost:3123/api/feedback', {
          email: text,
          code: code,
        }, {
          headers: {
            'Content-Type': 'application/json',
          },
        });
        console.log('Email sent:', response.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ –≤–∞—à email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }

      await this.usersService.updateEmailAndActivateNews(user.id, text);
      await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à email —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ–≤–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.');
      emailVerification.set(user.id, { code, attempts: 3 });
      await this.usersService.updateUserState(user.id, 'awaiting_code');
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email:');
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    if (user.state === 'awaiting_code') {
      const verification = emailVerification.get(user.id);
      if (!verification) {
        await this.usersService.updateUserState(user.id, 'awaiting_email');
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email —Å–Ω–æ–≤–∞:');
        return;
      }

      if (text === verification.code) {
        await this.usersService.updateUserState(user.id, 'email_getted');
        await ctx.reply('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∏ –Ω–æ–≤–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.');
        emailVerification.delete(user.id);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Ç.–¥.
        await ctx.reply('–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?');
      } else {
        verification.attempts--;
        if (verification.attempts > 0) {
          await ctx.reply(`–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å ${verification.attempts} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`);
        } else {
          await ctx.reply('–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email —Å–Ω–æ–≤–∞:');
          await this.usersService.updateUserState(user.id, 'awaiting_email');
          emailVerification.delete(user.id);
        }
      }
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
      const userId = ctx.from.id;
      const lastMenu = await this.menuService.getLastMenu(userId);
      if (lastMenu?.id) {
        console.log(`[TextMessageHandler] –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é –¥–ª—è menuId=${lastMenu.id}`);
        await this.menuService.updateMenuState(lastMenu.id, false);
      }
      if (lastMenu?.parentId) {
        console.log(`[TextMessageHandler] –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –º–µ–Ω—é —Å ID: ${lastMenu.parentId}`);
        const parentMenu = await this.menuService.getMenuById(lastMenu.parentId);
        if (parentMenu) {
          const subMenus = await this.menuService.getSubMenusByParentId(parentMenu.id);
          const keyboard = subMenus.map((submenu) => [{ text: submenu.name }]);
          keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]);
          await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
            reply_markup: { keyboard, resize_keyboard: true },
          });
          await this.menuService.setLastMenu(userId, parentMenu.id);
          return;
        }
      }
      console.log('[TextMessageHandler] –ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ sendMainMenu, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ MenuService
      // –ù–∞–ø—Ä–∏–º–µ—Ä: await this.menuService.sendMainMenu(ctx);
      return;
    }

    // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...
  }

  private validateEmail(email: string): boolean {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }
}