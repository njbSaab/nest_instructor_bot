import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { MenuService } from './services/menu.service';
import { UsersService } from '../users/users.service';
import { GreetingBotService } from './services/greeting-bot.service';

@Injectable()
export class BotService implements OnModuleInit {
  private bot: Telegraf;

  constructor(
    private readonly configService: ConfigService,
    private readonly menuService: MenuService,
    private readonly usersService: UsersService,
    private readonly greetingBotService: GreetingBotService, // –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  ) {
    const botToken = this.configService.get<string>('TEL_TOKEN');
    if (!botToken) {
      throw new Error('Telegram —Ç–æ–∫–µ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }
    this.bot = new Telegraf(botToken);
  }

  async onModuleInit() {
    console.log('[BotService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf...');

    this.bot.start(async (ctx) => {
      console.log('[BotService] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start');
    
      const telegramUser = ctx.from;
      const user = await this.usersService.findOrCreateUser({
        id: telegramUser.id,
        is_bot: telegramUser.is_bot,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        username: telegramUser.username,
        language_code: telegramUser.language_code,
      });
    
      console.log('[BotService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω:', user);
    
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
      const greetings = await this.greetingBotService.getAllGreetings();
    
      // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
      for (const greeting of greetings) {
        const personalizedText = greeting.greeting_text.replace(
          '[Name]',
          user.first_name || user.username || 'there' // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è, –Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
        );
    
        if (greeting.image_url) {
          await ctx.replyWithPhoto(greeting.image_url, { caption: personalizedText });
        } else {
          await ctx.reply(personalizedText);
        }
        await new Promise((resolve) => setTimeout(resolve, 2500)); // –ò–Ω—Ç–µ—Ä–≤–∞–ª 2.5 —Å–µ–∫—É–Ω–¥—ã
      }
    
      await this.sendMainMenu(ctx);
    });

    try {
      await this.bot.launch();
      console.log('[BotService] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.');
    } catch (error) {
      console.error('[BotService] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    }
  }

  private async sendMainMenu(ctx: any) {
    const menus = await this.menuService.getMainMenu();
    console.log('[BotService] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', menus);

    const keyboard = menus.map((menu) => [{ text: menu.name }]);
    await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
      reply_markup: {
        keyboard,
        resize_keyboard: true,
      },
    });
  }
}