import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { MenuService } from './services/menu.service';
import { UsersService } from '../users/users.service';
import { GreetingBotService } from './services/greeting-bot.service';
import { CallbackQuery } from 'telegraf/typings/core/types/typegram';

@Injectable()
export class BotService implements OnModuleInit {
  private bot: Telegraf;

  constructor(
    private readonly configService: ConfigService,
    private readonly menuService: MenuService,
    private readonly usersService: UsersService,
    private readonly greetingBotService: GreetingBotService,
  ) {
    const botToken = this.configService.get<string>('TEL_TOKEN');
    if (!botToken) {
      throw new Error('Telegram —Ç–æ–∫–µ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }
    this.bot = new Telegraf(botToken);
  }

  async onModuleInit() {
    console.log('[BotService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf...');

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.start(async (ctx) => {
      console.log('[BotService] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start');
      const user = await this.usersService.findOrCreateUser(ctx.from);
      console.log('[BotService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω:', user);

      const greetings = await this.greetingBotService.getAllGreetings();
      for (const greeting of greetings) {
        const personalizedText = greeting.greeting_text.replace('[Name]', user.first_name || 'there');
        if (greeting.image_url) {
          await ctx.replyWithPhoto(greeting.image_url, { caption: personalizedText });
        } else {
          await ctx.reply(personalizedText);
        }
        await new Promise((resolve) => setTimeout(resolve, 2500));
      }

      await this.sendMainMenu(ctx);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
    this.bot.hears(/.+/, async (ctx) => {
      const text = ctx.message?.text;
    
      if (!text) {
        console.log('[BotService] –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞');
        return;
      }
    
      console.log(`[BotService] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);
    
      const menus = await this.menuService.getMainMenu();
      console.log('[MenuService] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', menus);
    
      const selectedMenu = menus.find((menu) => menu.name === text);
    
      if (!selectedMenu) {
        console.log('[BotService] –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:', text);
        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }
    
      console.log(`[BotService] –í—ã–±—Ä–∞–Ω–æ –º–µ–Ω—é —Å ID: ${selectedMenu.id}`);
      console.log('[BotService] –°–≤—è–∑–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:', selectedMenu.linked_post);
    
      if (selectedMenu.linked_post) {
        console.log(
          `[BotService] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç—É —Å ID: ${selectedMenu.linked_post.id}`
        );
        await this.handlePost(ctx, selectedMenu.linked_post.id);
      } else {
        console.log('[BotService] –ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ–Ω—é');
        await ctx.reply('–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞.');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    this.bot.on('callback_query', async (ctx) => {
      const callbackQuery = ctx.callbackQuery as CallbackQuery;
      const callbackData = (callbackQuery as any).data;
    
      if (!callbackData) {
        console.log('[BotService] Callback –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö');
        await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return;
      }
    
      const buttonId = parseInt(callbackData, 10);
    
      if (isNaN(buttonId)) {
        console.log('[BotService] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π buttonId');
        await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        return;
      }
    
      console.log(`[BotService] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å ID: ${buttonId}`);
    
      const button = await this.menuService.getButtonById(buttonId);
    
      if (!button) {
        console.log('[BotService] –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', buttonId);
        await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        await ctx.answerCbQuery();
        return;
      }
    
      if (button.post) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
        console.log(`[BotService] –ö–Ω–æ–ø–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç —Å ID: ${button.post.id}`);
        await this.handlePost(ctx, button.post.id);
      } else if (button.url) {
        console.log(`[BotService] –ö–Ω–æ–ø–∫–∞-—Å—Å—ã–ª–∫–∞: ${button.url}`);
        await ctx.reply(`–û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É: ${button.url}`);
      } else {
        console.log('[BotService] –ö–Ω–æ–ø–∫–∞ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è.');
        await ctx.reply('–î–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.');
      }
    
      await ctx.answerCbQuery();
    });

    try {
      await this.bot.launch();
      console.log('[BotService] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.');
    } catch (error) {
      console.error('[BotService] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    }
  }

  private async sendMainMenu(ctx: any) {
    const menus = await this.menuService.getMainMenu();
    console.log('[BotService] –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', menus);

    const keyboard = menus.map((menu) => [{ text: menu.name }]);

    await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
      reply_markup: {
        keyboard,
        resize_keyboard: true,
        one_time_keyboard: false,
      },
    });
  }
  private async handlePost(ctx: any, postId: number) {
    console.log(`[BotService] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç —Å ID: ${postId}`);
  
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç
    const post = await this.menuService.getPostById(postId);
    console.log('[MenuService] –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç:', post);
  
    if (!post) {
      console.log('[BotService] –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', postId);
      await ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
  
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    let messageText = '';
    if (post.post_title) messageText += `${post.post_title}\n\n`;
    if (post.post_content) messageText += `${post.post_content}`;
  
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    if (post.post_image_url) {
      console.log(`[BotService] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ —Å ID=${postId}`);
      await ctx.replyWithPhoto(post.post_image_url, {
        caption: messageText || post.post_title || '',
      });
    } else if (messageText.trim().length > 0) {
      // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
      await ctx.reply(messageText.trim());
    } else {
      console.log('[BotService] –ü–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
      await ctx.reply('–ü–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞.');
    }
  
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Å—Ç–∞
    const buttons = await this.menuService.getButtonsForPost(post.id);
    console.log('[MenuService] –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞:', buttons);
  
    if (buttons.length > 0) {
      console.log(`[BotService] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ —Å ID=${postId}`);
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
          inline_keyboard: buttons.map((button) => [
            { text: button.name, callback_data: button.id.toString() },
          ]),
        },
      });
    } else if (post.next_post) {
      // –ï—Å–ª–∏ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
      console.log(`[BotService] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ—Å—Ç—É —Å ID: ${post.next_post.id}`);
      await this.handlePost(ctx, post.next_post.id);
    } else {
      console.log('[BotService] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤.');
      await ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤.');
    }
  }
}


