import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { MenuService } from './services/menu.service';
import { UsersService } from '../users/users.service';
import { GreetingBotService } from './services/greeting-bot.service';
import { UserSportsService } from './services/user-sports.service';
import { UserNewsService } from './services/user-news.service';
import{ UserNewsCategoryService } from './services/user-news-category.service'
import axios from 'axios';

@Injectable()
export class BotService implements OnModuleInit {
  private bot: Telegraf;
  // –í –Ω–∞—á–∞–ª–µ –∫–ª–∞—Å—Å–∞ BotService:
  private emailVerification = new Map<number, { code: string; attempts: number }>();
  
  constructor(
    private readonly configService: ConfigService,
    private readonly menuService: MenuService,
    private readonly usersService: UsersService,
    private readonly greetingBotService: GreetingBotService,
    private readonly userSportsService: UserSportsService, 
    private readonly userServiceNews: UserNewsService,
    private readonly userNewsCategoryService: UserNewsCategoryService
  ) {

    const botToken = this.configService.get<string>('TEL_TOKEN');
    if (!botToken) {
      throw new Error('Telegram —Ç–æ–∫–µ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }
    this.bot = new Telegraf(botToken);
  }

  async onModuleInit() {
    console.log('[BotService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf...');

    this.bot.start((ctx) => this.handleStartCommand(ctx));
    this.bot.hears(/.+/, (ctx) => this.handleTextMessage(ctx));
    this.bot.on('callback_query', (ctx) => this.handleCallbackQuery(ctx));

    try {
      this.bot.launch()
      .then(() => console.log('[BotService] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
      .catch((err) => console.error('[BotService] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err));
        console.log('[BotService] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.');
    } catch (error) {
      console.error('[BotService] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    }
  }

  /*
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  private async handleStartCommand(ctx: any) {
    console.log('[BotService] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start');
    const user = await this.usersService.findOrCreateUser(ctx.from);
    console.log('[BotService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω:', user);

    const greetings = await this.greetingBotService.getAllGreetings();
    for (const greeting of greetings) {
      const personalizedText = greeting.greeting_text.replace('[Name]', user.first_name || 'there');
      if (greeting.image_url) {
        await ctx.replyWithPhoto(greeting.image_url, { caption: personalizedText });
      } else {
        await ctx.reply(personalizedText);
      }
      await new Promise((resolve) => setTimeout(resolve, 2500));
    }
    await this.sendMainMenu(ctx);
  }
  /*
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async handleTextMessage(ctx: any) {
    const text = ctx.message?.text;
    if (!text) {
        console.log('[BotService] –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞');
        return;
    }

    console.log(`[BotService] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = await this.usersService.findOrCreateUser(ctx.from);
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è email
  // –í–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞ handleTextMessage, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ 'awaiting_email'
  
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è email
    if (user.state === 'awaiting_email') {
      if (!this.validateEmail(text)) {
        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π email:');
        return;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π 5-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
      const code = Math.floor(10000 + Math.random() * 90000).toString();
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP POST –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Å email –∏ –∫–æ–¥–æ–º
        const response = await axios.post('http://localhost:3123/api/feedback', {
          email: text,
          code: code,
        }, {
          headers: {
            'Content-Type': 'application/json',
          },
        });
        console.log('Email sent:', response.data);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ –≤–∞—à email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º email, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isNewsActive = true
      await this.usersService.updateEmailAndActivateNews(user.id, text);
      await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à email —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ–≤–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∏ 3 –ø–æ–ø—ã—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.emailVerification.set(user.id, { code, attempts: 3 });
      
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞
      await this.usersService.updateUserState(user.id, 'awaiting_code');
      
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email:');
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
    if (user.state === 'awaiting_code') {
      const verification = this.emailVerification.get(user.id);
      if (!verification) {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ email –∑–∞–Ω–æ–≤–æ
        await this.usersService.updateUserState(user.id, 'awaiting_email');
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email —Å–Ω–æ–≤–∞:');
        return;
      }
      
      if (text === verification.code) {
        // –ö–æ–¥ –≤–≤–µ–¥—ë–Ω –≤–µ—Ä–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await this.usersService.updateUserState(user.id, 'email_getted');
        await ctx.reply('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –∏ –Ω–æ–≤–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.');
        // –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
        this.emailVerification.delete(user.id);
        
        // –í—ã–≤–æ–¥–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
        await this.promptNewsSubscription(ctx);
      } else {
        // –ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π, —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        verification.attempts--;
        if (verification.attempts > 0) {
          await ctx.reply(`–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å ${verification.attempts} –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:`);
        } else {
          await ctx.reply('–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email —Å–Ω–æ–≤–∞:');
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
          await this.usersService.updateUserState(user.id, 'awaiting_email');
          this.emailVerification.delete(user.id);
        }
      }
      return;
    }
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        const userId = ctx.from.id;
        const lastMenu = await this.menuService.getLastMenu(userId);

        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–¥–º–µ–Ω—é –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if (lastMenu?.id) {
            console.log(`[BotService] –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é –¥–ª—è menuId=${lastMenu.id}`);
            await this.menuService.updateMenuState(lastMenu.id, false);
        }

        if (lastMenu?.parentId) {
            console.log(`[BotService] –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –º–µ–Ω—é —Å ID: ${lastMenu.parentId}`);
            const parentMenu = await this.menuService.getMenuById(lastMenu.parentId);

            if (parentMenu) {
                const subMenus = await this.menuService.getSubMenusByParentId(parentMenu.id);
                const keyboard = subMenus.map((submenu) => [{ text: submenu.name }]);
                keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"

                await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
                    reply_markup: {
                        keyboard,
                        resize_keyboard: true,
                    },
                });

                await this.menuService.setLastMenu(userId, parentMenu.id); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return;
            }
        }

        console.log('[BotService] –ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.');
        await this.sendMainMenu(ctx); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é –Ω–µ—Ç
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const menus = await this.menuService.getMainMenu();
    const selectedMenu = menus.find((menu) => menu.name === text);

    if (!selectedMenu) {
        console.log('[BotService] –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:', text);
        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. 239');
        return;
    }

    console.log(`[BotService] –í—ã–±—Ä–∞–Ω–æ –º–µ–Ω—é —Å ID: ${selectedMenu.id}`);

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–º–µ–Ω—é —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
    await this.menuService.updateMenuState(selectedMenu.id, false);

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–º–µ–Ω—é –ø–µ—Ä–µ–¥ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    await this.menuService.updateMenuState(selectedMenu.id, true);

    const subMenus = await this.menuService.getSubMenusByParentId(selectedMenu.id);

    if (subMenus.length > 0) {
        console.log(`[BotService] –ú–µ–Ω—é –∏–º–µ–µ—Ç –ø–æ–¥–º–µ–Ω—é:`, subMenus);
        const keyboard = subMenus.map((submenu) => [{ text: submenu.name }]);
        keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"

        await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
            reply_markup: {
                keyboard,
                resize_keyboard: true,
            },
        });

        const userId = ctx.from.id;
        await this.menuService.setLastMenu(userId, selectedMenu.id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } else if (selectedMenu.linked_post) {
        console.log(`[BotService] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç—É —Å ID: ${selectedMenu.linked_post.id}`);
        await this.handlePost(ctx, selectedMenu.linked_post.id);
    } else {
        await ctx.reply('–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω—é.');
    }
  }
  /*
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
   */
  private async handleCallbackQuery(ctx: any) {
    const callbackQuery = ctx.callbackQuery;
    const callbackData = callbackQuery?.data;
  
    if (!callbackData) {
      console.log('[BotService] Callback –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö');
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return;
    }
  
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ (news_subscribe_yes/ no)
    if (callbackData === 'news_subscribe_yes') {
      const userId = ctx.from.id;
      const subscribedCategories = await this.userNewsCategoryService.getSubscriptions(userId);
      const newsItems = await this.userServiceNews.getNewsByCategories(subscribedCategories);
      if (newsItems.length > 0) {
        let index = 0;
        const sendNextNews = async () => {
          const news = newsItems[index];
          if (news.post_image_url) {
            await ctx.replyWithPhoto(news.post_image_url, {
              caption: `${news.post_title}\n\n${news.post_content}\n\n–°—Å—ã–ª–∫–∞: ${news.news_url || ''}`,
            });
          } else {
            await ctx.reply(`${news.post_title}\n\n${news.post_content}\n\n–°—Å—ã–ª–∫–∞: ${news.news_url || ''}`);
          }
          index++;
          if (index < newsItems.length) {
            // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏
            setTimeout(sendNextNews, 2000);
          }
        };
        await sendNextNews();
      } else {
        await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–∫–∞ –Ω–µ—Ç.');
      }
      await ctx.answerCbQuery();
      return;
    }

    if (callbackData === 'news_subscribe_no') {
      await ctx.reply('–•–æ—Ä–æ—à–æ, –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.');
      await ctx.answerCbQuery();
      return;
    }
    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å callbackData –∫–∞–∫ ID –∫–Ω–æ–ø–∫–∏
    const buttonId = parseInt(callbackData, 10);
    if (isNaN(buttonId)) {
      console.log('[BotService] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–Ω–æ–ø–∫–∏:', callbackData);
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return;
    }
  
    console.log(`[BotService] –ù–∞–∂–∞—Ç–∞ inline-–∫–Ω–æ–ø–∫–∞ —Å ID: ${buttonId}`);
    const button = await this.menuService.getButtonById(buttonId);
    if (!button) {
      console.log(`[BotService] –ö–Ω–æ–ø–∫–∞ —Å ID=${buttonId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
      await ctx.reply('–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
      await ctx.answerCbQuery();
      return;
    }
  
    // –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π (categorySportId === 0)
    if (button.categorySportId === 0) {
      const userId = ctx.from.id;
      const user = await this.usersService.findOrCreateUser(ctx.from);
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–æ// –ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –∫–æ–¥–∞ –≤ BotService:
      if (button.categorySportId === 0) {
        const userId = ctx.from.id;
        const user = await this.usersService.findOrCreateUser(ctx.from);
        if (user.email && user.isNewsActive) {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∫–∞–∫ –º–∞—Å—Å–∏–≤ –∏–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          const subscribedCategories = await this.userNewsCategoryService.getSubscriptions(userId);
          const newsItems = await this.userServiceNews.getNewsByCategories(subscribedCategories);

          if (newsItems.length > 0) {
            let index = 0;
            const sendNextNews = async () => {
              const news = newsItems[index];
              if (news.post_image_url) {
                await ctx.replyWithPhoto(news.post_image_url, {
                  caption: `${news.post_title}\n\n${news.post_content}\n\n–°—Å—ã–ª–∫–∞: ${news.news_url || ''}`,
                });
              } else {
                await ctx.reply(`${news.post_title}\n\n${news.post_content}\n\n–°—Å—ã–ª–∫–∞: ${news.news_url || ''}`);
              }
              index++;
              if (index < newsItems.length) {
                setTimeout(sendNextNews, 2000);
              }
            };
            await sendNextNews();
          } else {
            await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–∫–∞ –Ω–µ—Ç.');
          }
          await ctx.answerCbQuery();
          return;
        } else {
          await ctx.reply('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å:');
          // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–µ—Ç—Å—è, –µ—Å–ª–∏ email –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã
        }
      } else {
        // –ï—Å–ª–∏ email –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã ‚Äì –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å (–≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏)
        // –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–≤–µ—Ç–∫–∞ –Ω–∏–∂–µ)
        // –í—ã –º–æ–∂–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –æ–ø—Ä–æ—Å –Ω–∞—á–Ω–µ—Ç—Å—è
        await ctx.reply('–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–ø—Ä–æ—Å:');
        // –ó–∞—Ç–µ–º –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ä–æ—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∏–∂–µ, –µ—Å–ª–∏ button.categorySportId != 0)
        // –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–∏–∂–µ
        // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –º—ã –Ω–µ –¥–µ–ª–∞–µ–º return, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –≤–µ—Ç–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–ø—Ä–æ—Å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      }
    }
    // –ù–æ–≤—ã–π –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫:
    if (button.categorySportId) {
      const userId = ctx.from.id;
      const categoryId = button.categorySportId; // ID –∏–∑ news_category
      const isYes = button.name.includes('yes'); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
      await this.userNewsCategoryService.updateSubscription(userId, categoryId, isYes);
      
      await ctx.reply(isYes ? '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!' : '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!');
      
      const maxCategoryId = await this.menuService.getMaxCategorySportId();
      if (categoryId === maxCategoryId) {
        await this.usersService.updateUserState(userId, 'awaiting_email');
        await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!');
        await new Promise(resolve => setTimeout(resolve, 1000));
        await ctx.reply('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ú—ã –ø—Ä–∏—à–ª–µ–º –í–∞–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É.');
        await new Promise(resolve => setTimeout(resolve, 1000));
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:');
        await ctx.answerCbQuery();
        return;
      }
      
      await ctx.answerCbQuery();
    }
    // –ï—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π URL ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if (button.url) {
      console.log(`[BotService] –£ –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å –≤–Ω–µ—à–Ω–∏–π URL: ${button.url}`);
      await ctx.reply(`–í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞: ${button.url}`);
      await ctx.answerCbQuery();
      return;
    }
    // –ï—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å postId ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç
    if (button.postId) {
      console.log(`[BotService] –£ –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å postId=${button.postId}. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç.`);
      await this.handlePost(ctx, button.postId);
      await ctx.answerCbQuery();
      return;
    }
    console.log('[BotService] –ö–Ω–æ–ø–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç URL –∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ—Å—Ç—É.');
    await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –∫–Ω–æ–ø–∫–µ.');
    await ctx.answerCbQuery();
  }

  /*
   * –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞
   */
  private async handlePost(ctx: any, postId: number) {
    console.log(`[BotService] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç —Å ID: ${postId}`);
    const post = await this.menuService.getPostById(postId);
    if (!post) {
      await ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
  
    // –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ—Å—Ç–æ–º
    const buttons = await this.menuService.getButtonsForPost(post.id);
  
    // –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ —Å —É—á—ë—Ç–æ–º url/–Ω–µ—Ç url
    const inlineKeyboard = buttons.map((btn) => {
      if (btn.url) {
        // –ö–Ω–æ–ø–∫–∞ —Å –≤–Ω–µ—à–Ω–µ–π —Å—Å—ã–ª–∫–æ–π -> Telegram —Å–∞–º –æ—Ç–∫—Ä–æ–µ—Ç, –±–µ–∑ –∫–æ–ª–±—ç–∫–∞
        return [{ text: btn.name, url: btn.url }];
      } else {
        // –û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞ -> callback_data
        return [{ text: btn.name, callback_data: btn.id.toString() }];
      }
    });
  
    // –°–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏–ª–∏ –±–µ–∑)
    const messageText = post.post_content || '';
    if (post.post_image_url) {
      await ctx.replyWithPhoto(post.post_image_url, {
        caption: messageText,
        reply_markup: inlineKeyboard.length
          ? { inline_keyboard: inlineKeyboard }
          : undefined,
      });
    } else {
      await ctx.reply(messageText, {
        reply_markup: inlineKeyboard.length
          ? { inline_keyboard: inlineKeyboard }
          : undefined,
      });
    }
  
    // –ï—Å–ª–∏ —É –ø–æ—Å—Ç–∞ –µ—Å—Ç—å next_post, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç
    if (post.next_post) {
      await this.handlePost(ctx, post.next_post.id);
    }
  }
  /*
  * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ parentId
  */
  private async sendMainMenu(ctx: any, parentId?: number) {
    const menus = await this.menuService.getMainMenu();
    const keyboard = menus.map((menu) => [{ text: menu.name }]);

    await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
      reply_markup: { keyboard, resize_keyboard: true, one_time_keyboard: false },
    });
  }
  /*
  * –í–∞–ª–∏–¥–∞—Ü–∏—è —ç–º–∞–∏–ª–∞
  */
  private validateEmail(email: string): boolean {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }
  /*
  * –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏
  */
  private async promptNewsSubscription(ctx: any): Promise<void> {
    await ctx.reply('–ñ–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚úÖ –î–∞', callback_data: 'news_subscribe_yes' },{ text: '‚ùå –ù–µ—Ç', callback_data: 'news_subscribe_no' }],
        ],
      },
    });
  }
  /*
  * –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—É—à–∞ 
  */
  public async sendMessage(chatId: number, message: string): Promise<void> {
    try {
      await this.bot.telegram.sendMessage(chatId, message);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, error);
    }
  }
}

