import { Injectable, OnModuleInit } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { MenuService } from './services/menu.service';
import { UsersService } from '../users/users.service';
import { GreetingBotService } from './services/greeting-bot.service';
import { CallbackQuery } from 'telegraf/typings/core/types/typegram';

@Injectable()
export class BotService implements OnModuleInit {
  private bot: Telegraf;

  constructor(
    private readonly configService: ConfigService,
    private readonly menuService: MenuService,
    private readonly usersService: UsersService,
    private readonly greetingBotService: GreetingBotService,
  ) {
    const botToken = this.configService.get<string>('TEL_TOKEN');
    if (!botToken) {
      throw new Error('Telegram —Ç–æ–∫–µ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
    }
    this.bot = new Telegraf(botToken);
  }

  async onModuleInit() {
    console.log('[BotService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf...');

    this.bot.start((ctx) => this.handleStartCommand(ctx));
    this.bot.hears(/.+/, (ctx) => this.handleTextMessage(ctx));
    this.bot.on('callback_query', (ctx) => this.handleCallbackQuery(ctx));

    try {
      await this.bot.launch();
      console.log('[BotService] –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.');
    } catch (error) {
      console.error('[BotService] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
   */
  private async handleStartCommand(ctx: any) {
    console.log('[BotService] –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start');
    const user = await this.usersService.findOrCreateUser(ctx.from);
    console.log('[BotService] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω:', user);

    const greetings = await this.greetingBotService.getAllGreetings();
    for (const greeting of greetings) {
      const personalizedText = greeting.greeting_text.replace('[Name]', user.first_name || 'there');
      if (greeting.image_url) {
        await ctx.replyWithPhoto(greeting.image_url, { caption: personalizedText });
      } else {
        await ctx.reply(personalizedText);
      }
      await new Promise((resolve) => setTimeout(resolve, 2500));
    }

    await this.sendMainMenu(ctx);
  }
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async handleTextMessage(ctx: any) {
    const text = ctx.message?.text;
    if (!text) {
        console.log('[BotService] –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞');
        return;
    }

    console.log(`[BotService] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${text}"`);

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        const userId = ctx.from.id;
        const lastMenu = await this.menuService.getLastMenu(userId);

        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–¥–º–µ–Ω—é –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º
        if (lastMenu?.id) {
            console.log(`[BotService] –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–º–µ–Ω—é –¥–ª—è menuId=${lastMenu.id}`);
            await this.menuService.updateMenuState(lastMenu.id, false);
        }

        if (lastMenu?.parentId) {
            console.log(`[BotService] –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É –º–µ–Ω—é —Å ID: ${lastMenu.parentId}`);
            const parentMenu = await this.menuService.getMenuById(lastMenu.parentId);

            if (parentMenu) {
                const subMenus = await this.menuService.getSubMenusByParentId(parentMenu.id);
                const keyboard = subMenus.map((submenu) => [{ text: submenu.name }]);
                keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"

                await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
                    reply_markup: {
                        keyboard,
                        resize_keyboard: true,
                    },
                });

                await this.menuService.setLastMenu(userId, parentMenu.id); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                return;
            }
        }

        console.log('[BotService] –ù–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.');
        await this.sendMainMenu(ctx); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é –Ω–µ—Ç
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    const menus = await this.menuService.getMainMenu();
    const selectedMenu = menus.find((menu) => menu.name === text);

    if (!selectedMenu) {
        console.log('[BotService] –ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞:', text);
        await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
    }

    console.log(`[BotService] –í—ã–±—Ä–∞–Ω–æ –º–µ–Ω—é —Å ID: ${selectedMenu.id}`);

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–º–µ–Ω—é —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π
    await this.menuService.updateMenuState(selectedMenu.id, false);

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–º–µ–Ω—é –ø–µ—Ä–µ–¥ –∏—Ö –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    await this.menuService.updateMenuState(selectedMenu.id, true);

    const subMenus = await this.menuService.getSubMenusByParentId(selectedMenu.id);

    if (subMenus.length > 0) {
        console.log(`[BotService] –ú–µ–Ω—é –∏–º–µ–µ—Ç –ø–æ–¥–º–µ–Ω—é:`, subMenus);
        const keyboard = subMenus.map((submenu) => [{ text: submenu.name }]);
        keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"

        await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
            reply_markup: {
                keyboard,
                resize_keyboard: true,
            },
        });

        const userId = ctx.from.id;
        await this.menuService.setLastMenu(userId, selectedMenu.id); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } else if (selectedMenu.linked_post) {
        console.log(`[BotService] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–≤—è–∑–∞–Ω–Ω–æ–º—É –ø–æ—Å—Ç—É —Å ID: ${selectedMenu.linked_post.id}`);
        await this.handlePost(ctx, selectedMenu.linked_post.id);
    } else {
        await ctx.reply('–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –º–µ–Ω—é.');
    }
  }
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
   */
  private async handleCallbackQuery(ctx: any) {
    const callbackQuery = ctx.callbackQuery as CallbackQuery;
    const callbackData = (callbackQuery as any).data;
  
    if (!callbackData) {
      console.log('[BotService] Callback –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö');
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return;
    }
  
    const menuId = parseInt(callbackData, 10);
    console.log(`[BotService] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å ID: ${menuId}`);
  
    if (isNaN(menuId)) {
      console.log('[BotService] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π menuId');
      await ctx.answerCbQuery('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      return;
    }
  
    const menu = await this.menuService.getMenuById(menuId);
    if (!menu) {
      console.log(`[BotService] –ú–µ–Ω—é —Å ID=${menuId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
      await ctx.reply('–ú–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      await ctx.answerCbQuery();
      return;
    }
  
    const subMenus = await this.menuService.getSubMenusByParentId(menuId);
    const keyboard = subMenus.map((submenu) => [
      { text: submenu.name, callback_data: submenu.id.toString() },
    ]);
  
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if (menu.parentId !== null) {
      console.log(`[BotService] –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è parentId=${menu.parentId}`);
      keyboard.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: menu.parentId.toString() }]);
    }
  
    if (subMenus.length > 0) {
      console.log('[BotService] –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥–º–µ–Ω—é:', keyboard);
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:', {
        reply_markup: { inline_keyboard: keyboard },
      });
      await ctx.answerCbQuery();
      return;
    }
  
    if (menu.linked_post) {
      console.log(`[BotService] –ö–Ω–æ–ø–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–æ—Å—Ç —Å ID: ${menu.linked_post.id}`);
      await this.handlePost(ctx, menu.linked_post.id);
      await ctx.answerCbQuery();
      return;
    }
  
    console.log('[BotService] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    await ctx.reply('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
    await ctx.answerCbQuery();
  }

  /**
   * –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞
   */
  private async handlePost(ctx: any, postId: number) {
    console.log(`[BotService] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç —Å ID: ${postId}`);
    const post = await this.menuService.getPostById(postId);
    if (!post) {
      await ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }

    const buttons = await this.menuService.getButtonsForPost(post.id);
    let messageText = post.post_content || '';

    if (post.post_image_url) {
      await ctx.replyWithPhoto(post.post_image_url, {
        caption: messageText,
        reply_markup: buttons.length
          ? { inline_keyboard: buttons.map((button) => [{ text: button.name, callback_data: button.id.toString() }]) }
          : undefined,
      });
    } else {
      await ctx.reply(messageText, {
        reply_markup: buttons.length
          ? { inline_keyboard: buttons.map((button) => [{ text: button.name, callback_data: button.id.toString() }]) }
          : undefined,
      });
    }

    if (post.next_post) {
      await this.handlePost(ctx, post.next_post.id);
    }
  }

  /*
  * –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ parentId
  */
  private async sendMainMenu(ctx: any, parentId?: number) {
    const menus = await this.menuService.getMainMenu();
    const keyboard = menus.map((menu) => [{ text: menu.name }]);

    await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
      reply_markup: { keyboard, resize_keyboard: true, one_time_keyboard: false },
    });
  }
}

