import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';

@Injectable()
export class MessageService {
    async handleText(ctx: Context) {
        const text = ctx.message['text'];
    
        switch (text) {
          case 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
            await ctx.reply('üìñ –≠—Ç–æ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è". –ó–¥–µ—Å—å lorem ipsum...');
            break;
    
          case 'üí≥ –û–ø–ª–∞—Ç–∞':
            await ctx.reply('üí≥ –†–∞–∑–¥–µ–ª "–û–ø–ª–∞—Ç–∞": –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.');
            break;
    
          case '‚ùì –ü–æ–º–æ—â—å':
            await ctx.reply('‚ùì –≠—Ç–æ —Ä–∞–∑–¥–µ–ª "–ü–æ–º–æ—â—å". –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
            break;
    
          case 'üéÅ –ü—Ä–æ–º–æ':
            await ctx.reply('üéÅ –≠—Ç–æ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ–º–æ". –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.');
            break;
    
          default:
            await ctx.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.');
        }
      }
}
