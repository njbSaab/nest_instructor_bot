import { PromoService } from '../promo/promo.service';
import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { MenuButton } from '../../entities/menu-button.entity';

@Injectable()
export class MessageService {
  constructor(
    @InjectRepository(MenuButton)
    private readonly menuButtonRepository: Repository<MenuButton>,
    private readonly promoService: PromoService,
  ) {}

  async handleText(ctx: Context) {
    const text = ctx.message['text'];

    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ –∏–º–µ–Ω–∏
    const button = await this.menuButtonRepository.findOne({
      where: { name: text },
    });

    if (!button) {
      await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.');
      return;
    }

    if (button.action === 'promo') {
      console.log('–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–º–æ" –Ω–∞–∂–∞—Ç–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ PromoService.');
      await this.promoService.sendPromoMenu(ctx);
    } else {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
      if (button.parent_id === null) {
        await this.handleMainMenu(ctx, button);
      } else {
        await this.handleChildMenu(ctx, button);
      }
    }
  }
  private async handleMainMenu(ctx: Context, button: MenuButton) {
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏:', button);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    const childButtons = await this.menuButtonRepository.find({
        where: { parent_id: button.id },
        order: { row_order: 'ASC', column_order: 'ASC' },
    });

    console.log('–î–æ—á–µ—Ä–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', childButtons);

    if (childButtons.length > 0) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ –∫–Ω–æ–ø–∫–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        const keyboard = childButtons.map((btn) => [{ text: btn.name }]);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ parent_id != 1
        if (button.parent_id !== 1) {
            keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥' }]);
        }

        console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', keyboard);

        await ctx.reply(button.content || '–í—ã–±–µ—Ä–∏—Ç–µ:', {
            reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
            },
        });
    } else {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏:', button.content);
        await ctx.reply(button.content || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
    }
  }
  private async handleChildMenu(ctx: Context, button: MenuButton) {
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω—é—é –∫–Ω–æ–ø–∫—É:', button);

    if (button.action === 'back') {
        console.log('–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞–∂–∞—Ç–∞.');

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
        const parentButton = await this.menuButtonRepository.findOne({
            where: { id: button.parent_id },
        });

        console.log('–ù–∞–π–¥–µ–Ω–Ω–∞—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞:', parentButton);

        if (parentButton && parentButton.parent_id === 1) {
            // –ï—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç - –∫–Ω–æ–ø–∫–∞ —É—Ä–æ–≤–Ω—è 1, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await this.sendMainMenu(ctx);
        } else if (parentButton) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
            await this.handleMainMenu(ctx, parentButton);
        } else {
            console.log('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
            await this.sendMainMenu(ctx);
        }
    } else {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—á–µ—Ä–Ω–µ–π –∫–Ω–æ–ø–∫–∏:', button.content);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫
        const childButtons = await this.menuButtonRepository.find({
            where: { parent_id: button.id },
            order: { row_order: 'ASC', column_order: 'ASC' },
        });

        console.log('–î–æ—á–µ—Ä–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–Ω–æ–ø–∫–∏:', childButtons);

        if (childButtons.length > 0) {
            const keyboard = childButtons.map((btn) => [{ text: btn.name }]);

            console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫:', keyboard);

            await ctx.reply(button.content || '–í—ã–±–µ—Ä–∏—Ç–µ:', {
                reply_markup: {
                    keyboard: keyboard,
                    resize_keyboard: true,
                },
            });
        } else {
            // –ï—Å–ª–∏ –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
            await ctx.reply(button.content || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
        }
    }
  }
  private async sendMainMenu(ctx: Context) {
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');

    const buttons = await this.menuButtonRepository.find({
        where: { parent_id: 1 },
        order: { row_order: 'ASC', column_order: 'ASC' },
    });

    console.log('–ö–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', buttons);

    const keyboard: { text: string }[][] = [];
    buttons.forEach((button) => {
        const rowIndex = button.row_order - 1;
        if (!keyboard[rowIndex]) {
            keyboard[rowIndex] = [];
        }
        keyboard[rowIndex][button.column_order] = { text: button.name };
    });

    const filteredKeyboard = keyboard.filter((row) => row.length > 0);

    console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', filteredKeyboard);

    await ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        reply_markup: {
            keyboard: filteredKeyboard,
            resize_keyboard: true,
        },
    });
  }
}