import { PromoService } from '../promo/promo.service';
import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { MenuButton } from '../../entities/menu-button.entity';
import { KeyboardService } from '../keyboard/keyboard.service';

@Injectable()
export class MessageService {
  constructor(
    @InjectRepository(MenuButton)
    private readonly menuButtonRepository: Repository<MenuButton>,
    private readonly promoService: PromoService,
    private readonly keyboardService: KeyboardService, 

  ) {}

  async handleText(ctx: Context) {
    const text = ctx.message['text'];
    console.log(`–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: ${text}`);

    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ –∏–º–µ–Ω–∏
    const button = await this.menuButtonRepository.findOne({
        where: { name: text },
    });

    if (!button) {
        console.log(`–ö–Ω–æ–ø–∫–∞ —Å —Ç–µ–∫—Å—Ç–æ–º "${text}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.`);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é.');
        return;
    }

    console.log(`–ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞:`, button);

    if (button.action === 'promo') {
        console.log('–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–º–æ" –Ω–∞–∂–∞—Ç–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ PromoService.');
        await this.promoService.sendPromoMenu(ctx);
    } else if (button.action === 'back') {
        console.log('–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞–∂–∞—Ç–∞.');
        await this.handleBackAction(ctx, button);
    } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏
        if (button.parent_id === null) {
            console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
            await this.handleMainMenu(ctx, button);
        } else {
            console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –¥–æ—á–µ—Ä–Ω–µ–µ –º–µ–Ω—é.');
            await this.handleChildMenu(ctx, button);
        }
    }
  }

  private async handleMainMenu(ctx: Context, button: MenuButton) {
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏:', button);

    const keyboard = await this.keyboardService.generateKeyboard(button.id);

    if (keyboard.length > 0) {
        console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', keyboard);
        await ctx.reply(button.content || '–í—ã–±–µ—Ä–∏—Ç–µ:', {
            reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
            },
        });
    } else {
        console.log('–ù–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç.');
        await ctx.reply(button.content || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
    }
  }

  private async handleChildMenu(ctx: Context, button: MenuButton) {
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω—é—é –∫–Ω–æ–ø–∫—É:', button);

    if (button.action === 'back') {
        console.log('–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –Ω–∞–∂–∞—Ç–∞.');
        await this.handleBackAction(ctx, button);
        return;
    }

    console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—á–µ—Ä–Ω–µ–π –∫–Ω–æ–ø–∫–∏:', button.content);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º KeyboardService –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    const keyboard = await this.keyboardService.generateKeyboard(button.id);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–ª–∏ —ç—Ç–æ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (button.parent_id !== null) {
        console.log('–î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.');
        keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥' }]); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
    }

    if (keyboard.length > 0) {
        console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫:', keyboard);
        await ctx.reply(button.content || '–í—ã–±–µ—Ä–∏—Ç–µ:', {
            reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
            },
        });
    } else {
        console.log('–ù–µ—Ç –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–Ω—Ç.');
        await ctx.reply(button.content || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
    }
}

  private async handleBackAction(ctx: Context, button: MenuButton) {
    console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ù–∞–∑–∞–¥" –¥–ª—è –∫–Ω–æ–ø–∫–∏:`, button);

    const parentButton = await this.menuButtonRepository.findOne({
        where: { id: button.parent_id },
    });

    if (parentButton) {
        console.log(`–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:`, parentButton);

        const keyboard = await this.keyboardService.generateKeyboard(parentButton.id, parentButton.parent_id !== null);

        console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –º–µ–Ω—é:', keyboard);

        await ctx.reply(parentButton.content || '–í—ã–±–µ—Ä–∏—Ç–µ:', {
            reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
            },
        });
    } else {
        console.log('–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.');
        await this.sendMainMenu(ctx);
    }
  }
  private async sendMainMenu(ctx: Context) {
    console.log('–§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');

    const keyboard = await this.keyboardService.generateKeyboard(1);

    if (!keyboard.length) {
        console.log('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ. –ö–Ω–æ–ø–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
        await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.');
        return;
    }

    console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é:', keyboard);

    await ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
        reply_markup: {
            keyboard: keyboard,
            resize_keyboard: true,
        },
    });
  }
}