import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from '../../entities/user.entity'; // –°—É—â–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import { MenuButton } from '../../entities/menu-button.entity'; // –°—É—â–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏

@Injectable()
export class StartService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
    @InjectRepository(MenuButton)
    private readonly menuButtonRepository: Repository<MenuButton>,
  ) {}

  async handleStart(ctx: Context) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    await this.saveUser(ctx);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
      reply_markup: {
        keyboard: await this.generateKeyboard(),
        resize_keyboard: true,
        one_time_keyboard: false,
      },
    });
  }

  private async saveUser(ctx: Context) {
    const userInfo = ctx.from; // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userData = {
      id: userInfo.id,
      username: userInfo.username || null,
      first_name: userInfo.first_name,
      last_name: userInfo.last_name || null,
      language_code: userInfo.language_code || null,
      started_at: new Date(),
      state: 'menu', // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let user = await this.userRepository.findOne({ where: { id: userData.id } });

    if (!user) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
      user = this.userRepository.create(userData);
      await this.userRepository.save(user);
      console.log('–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω:', user);
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
      user.started_at = new Date();
      user.state = 'menu';
      user.username = userData.username;
      user.first_name = userData.first_name;
      user.last_name = userData.last_name;
      user.language_code = userData.language_code;
      await this.userRepository.save(user);
      console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', user);
    }
  }

  private async generateKeyboard() {
    console.log('–ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

    const allButtons = await this.menuButtonRepository.find({
        order: { row_order: 'ASC', column_order: 'ASC' },
    });

    if (!allButtons.length) {
        console.log('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–Ω–æ–ø–∫–∏.');
        return [];
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${allButtons.length} –∫–Ω–æ–ø–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);

    const topLevelButtons = allButtons.filter((button) => button.parent_id === 1);

    if (!topLevelButtons.length) {
        console.log('–ö–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
        return [];
    }

    console.log(`–ö–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (${topLevelButtons.length}):`, topLevelButtons);

    const groupedButtons = topLevelButtons.reduce((acc, button) => {
        const row = button.row_order || 9999; // –ö–Ω–æ–ø–∫–∏ –±–µ–∑ row_order –ø–æ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
        if (!acc[row]) {
            acc[row] = [];
        }
        acc[row].push({ text: button.name });
        return acc;
    }, {});

    const keyboard = Object.keys(groupedButtons)
        .sort((a, b) => Number(a) - Number(b))
        .map((row) => groupedButtons[row]);

    console.log('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', keyboard);

    return keyboard;
  }
}