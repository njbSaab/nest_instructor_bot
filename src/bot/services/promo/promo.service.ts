import { Injectable } from '@nestjs/common';
import { Context } from 'telegraf';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { MenuButton } from '../../entities/menu-button.entity';

@Injectable()
export class PromoService {
  constructor(
    @InjectRepository(MenuButton)
    private readonly menuButtonRepository: Repository<MenuButton>,
  ) {}

  async sendPromoMenu(ctx: Context) {
    console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ü—Ä–æ–º–æ...');

    // –ò—â–µ–º –∫–Ω–æ–ø–∫–∏ —Å parent_id = 7 (–ü—Ä–æ–º–æ)
    const promoButtons = await this.menuButtonRepository.find({
      where: { parent_id: 7 },
      order: { row_order: 'ASC', column_order: 'ASC' },
    });

    console.log('–ö–Ω–æ–ø–∫–∏ –¥–ª—è –ü—Ä–æ–º–æ:', promoButtons);

    // –†–∞–∑–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ inline –∏ keyboard
    const inlineButtons = promoButtons.filter((btn) => btn.is_inline);
    const keyboardButtons = promoButtons.filter((btn) => !btn.is_inline);

    // –§–æ—Ä–º–∏—Ä—É–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const inlineKeyboard: { text: string; callback_data: string }[][] = [];
    inlineButtons.forEach((button) => {
      const rowIndex = button.row_order ? button.row_order - 1 : 0; // –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ (0-based)
      if (!inlineKeyboard[rowIndex]) {
        inlineKeyboard[rowIndex] = [];
      }
      inlineKeyboard[rowIndex].push({
        text: button.name,
        callback_data: button.action,
      });
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const keyboard: { text: string }[][] = [];
    keyboardButtons.forEach((button) => {
      const rowIndex = button.row_order ? button.row_order - 1 : 0;
      if (!keyboard[rowIndex]) {
        keyboard[rowIndex] = [];
      }
      keyboard[rowIndex].push({ text: button.name });
    });

    console.log('Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', inlineKeyboard);
    console.log('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞:', keyboard);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.reply('üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–æ:', {
      reply_markup: {
        inline_keyboard: inlineKeyboard.length > 0 ? inlineKeyboard : undefined,
        keyboard: keyboard.length > 0 ? keyboard : undefined,
        resize_keyboard: true,
      },
    });
  }

  async handleCallbackQuery(ctx: Context) {
    const action = ctx.callbackQuery['data'];

    // –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ `action`
    const button = await this.menuButtonRepository.findOne({
      where: { action },
    });

    if (!button) {
      await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
      return;
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏
    await ctx.reply(button.content || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.');
  }
}