import { Injectable } from '@nestjs/common';
import { Repository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';
import { MenuButton } from '../../entities/menu-button.entity';

@Injectable()
export class KeyboardService {
  constructor(
    @InjectRepository(MenuButton)
    private readonly menuButtonRepository: Repository<MenuButton>,
  ) {}

  async generateKeyboard(parentId: number, addBackButton = false): Promise<{ text: string }[][]> {
    console.log(`–ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è parent_id: ${parentId}...`);

    const allButtons = await this.menuButtonRepository.find({
        where: { parent_id: parentId },
        order: { row_order: 'ASC', column_order: 'ASC' },
    });

    if (!allButtons.length) {
        console.log(`–ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è parent_id: ${parentId}.`);
        return [];
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ ${allButtons.length} –∫–Ω–æ–ø–æ–∫.`);

    const groupedButtons = allButtons.reduce((acc, button) => {
        const row = button.row_order || 9999; // –ö–Ω–æ–ø–∫–∏ –±–µ–∑ row_order –ø–æ–º–µ—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü
        if (!acc[row]) {
            acc[row] = [];
        }
        acc[row].push({ text: button.name });
        return acc;
    }, {});

    const keyboard = Object.keys(groupedButtons)
        .sort((a, b) => Number(a) - Number(b))
        .map((row) => groupedButtons[row]);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if (addBackButton && parentId !== 1) {
        keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥' }]);
    }

    console.log(`–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è parent_id ${parentId}:`, keyboard);

    return keyboard;
   }
}