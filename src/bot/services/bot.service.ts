import { Injectable } from '@nestjs/common';
import { Start, Help, On, Update } from 'nestjs-telegraf';
import { Context } from 'telegraf';

@Injectable()
@Update()
export class BotService {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  @Start()
  async onStart(ctx: Context) {
    await ctx.reply(
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ InfoForGamesBot!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–∑ –º–µ–Ω—é:'
    );
    this.sendMainMenu(ctx);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
  @Help()
  async onHelp(ctx: Context) {
    await ctx.reply(
      '‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å\n/help - –ü–æ–º–æ—â—å\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º.'
    );
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  @On('text')
  async onText(ctx: Context) {
    const text = ctx.message['text'];

    switch (text) {
      case 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è':
        await ctx.reply('üìñ –≠—Ç–æ —Ä–∞–∑–¥–µ–ª "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è". –ó–¥–µ—Å—å lorem ipsum...');
        break;

      case 'üí≥ –û–ø–ª–∞—Ç–∞':
        await this.sendPaymentMenu(ctx);
        break;

      case 'üè¶ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—á—ë—Ç':
        await ctx.reply('üè¶ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å—á—ë—Ç:\n\n–°—á—ë—Ç: 123456789\n–ë–∞–Ω–∫: ABC Bank');
        break;

      case 'üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏':
        await ctx.reply('üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.');
        break;

      case '‚ùì –ü–æ–º–æ—â—å':
        await ctx.reply('‚ùì –†–∞–∑–¥–µ–ª "–ü–æ–º–æ—â—å": –ü–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        break;

      case 'üéÅ –ü—Ä–æ–º–æ':
        await ctx.reply('üéÅ –†–∞–∑–¥–µ–ª "–ü—Ä–æ–º–æ": –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:');
        await this.sendPromoMenu(ctx);
        break;

      case 'üé∞ –°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–ø–æ—Ä—Ç':
        await ctx.reply('üé∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ "–°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–ø–æ—Ä—Ç". –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏!');
        break;

      case 'üé≤ –û–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ':
        await ctx.reply('üé≤ –í—ã –≤—ã–±—Ä–∞–ª–∏ "–û–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ". –ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É!');
        break;

      case 'üéüÔ∏è Free Spin':
        await ctx.reply('üéüÔ∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ Free Spin! –£–¥–∞—á–∏!');
        break;

      case 'üéÅ Free Bet':
        await ctx.reply('üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ Free Bet! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π!');
        break;

      case 'üîô –ù–∞–∑–∞–¥':
        await this.sendMainMenu(ctx);
        break;

      default:
        await ctx.reply('‚ùå –Ø –Ω–µ –ø–æ–Ω—è–ª, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.');
        break;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
  private async sendMainMenu(ctx: Context) {
    await ctx.sendMessage('üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
      reply_markup: {
        keyboard: [
          [{ text: 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' }], 
          [{ text: 'üí≥ –û–ø–ª–∞—Ç–∞' }],
          [{ text: '‚ùì –ü–æ–º–æ—â—å' }, { text: 'üéÅ –ü—Ä–æ–º–æ' }],
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
      },
    });
  }
  // –ü–æ–¥–º–µ–Ω—é –¥–ª—è "–û–ø–ª–∞—Ç–∞" —Å –∫–Ω–æ–ø–∫–∞–º–∏
  private async sendPaymentMenu(ctx: Context) {
    await ctx.sendMessage('üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', {
      reply_markup: {
        keyboard: [
          [{ text: 'üè¶ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—á—ë—Ç' }],
          [{ text: 'üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏' }],
          [{ text: 'üîô –ù–∞–∑–∞–¥' }],
        ],
        resize_keyboard: true,
        one_time_keyboard: false,
      },
    });
  }

  // –ü–æ–¥–º–µ–Ω—é –¥–ª—è "–ü—Ä–æ–º–æ" —Å –∫–Ω–æ–ø–∫–∞–º–∏
  private async sendPromoMenu(ctx: Context) {
    await ctx.reply('üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–º–æ:', {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üé∞ –°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–ø–æ—Ä—Ç', callback_data: 'promo_sport' }],
          [{ text: 'üé≤ –û–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ', callback_data: 'promo_casino' }],
          [
            { text: 'üéüÔ∏è Free Spin', callback_data: 'promo_freespin' },
            { text: 'üéÅ Free Bet', callback_data: 'promo_freebet' },
          ],
        ],
      },
    });
  }
  @On('callback_query')
        async onCallbackQuery(ctx: Context) {
        const action = ctx.callbackQuery['data'];
        switch (action) {
            case 'promo_sport':
            await ctx.reply('üé∞ –í—ã –≤—ã–±—Ä–∞–ª–∏ "–°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–ø–æ—Ä—Ç". –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫–∏!');
            break;
            case 'promo_casino':
            await ctx.reply('üé≤ –í—ã –≤—ã–±—Ä–∞–ª–∏ "–û–Ω–ª–∞–π–Ω –∫–∞–∑–∏–Ω–æ". –ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É!');
            break;
            case 'promo_freespin':
            await ctx.reply('üéüÔ∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ Free Spin! –£–¥–∞—á–∏!');
            break;
            case 'promo_freebet':
            await ctx.reply('üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ Free Bet! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∏–≥—Ä–æ–π!');
            break;
            default:
            await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.');
            break;
        }
    }

}