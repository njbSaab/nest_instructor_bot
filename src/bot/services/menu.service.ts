import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { IsNull, Not, Repository } from 'typeorm';
import { MenuTable } from '../../entities/menu-tables.entity';
import { MenuButton } from '../../entities/menu-button.entity';
import { MenuPost } from '../../entities/menu-posts.entity';
import { MenuPostButton } from '../../entities/menu-post-button.entity';

@Injectable()
export class MenuService {
  constructor(
    @InjectRepository(MenuTable)
    private readonly menuTableRepository: Repository<MenuTable>,
    @InjectRepository(MenuButton)
    private readonly menuButtonRepository: Repository<MenuButton>,
    @InjectRepository(MenuPost)
    private readonly menuPostRepository: Repository<MenuPost>,
    @InjectRepository(MenuPostButton)
    private readonly menuPostButtonRepository: Repository<MenuPostButton>, // –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–≤—è–∑–µ–π
  ) {}
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ parentId
  async getMainMenu(): Promise<MenuTable[]> {
    const menus = await this.menuTableRepository.find({
      where: {
        isActive: true, // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö isActive=false
      },
      relations: ['linked_post'],
      order: { order: 'ASC' },
    });
  
    // console.log('[MenuService] –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', menus);
    return menus;
  }

  //—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é 
  public async sendMainMenu(ctx: any, parentId?: number): Promise<void> {
    const menus = await this.getMainMenu();
    const keyboard = menus.map((menu) => [{ text: menu.name }]);
    await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
      reply_markup: { keyboard, resize_keyboard: true, one_time_keyboard: false },
    });
  }

  // async getMainMenu(parentId?: number): Promise<MenuTable[]> {
  //   let menus;
  //   if (parentId === null || parentId === undefined) {
  //     menus = await this.menuTableRepository.find({
  //       where: { parentId: IsNull(), isActive: true },
  //       relations: ['linked_post'],
  //       order: { order: 'ASC' },
  //     });
  //   } else {
  //     menus = await this.menuTableRepository.find({
  //       where: { parentId: parentId, isActive: true },
  //       relations: ['linked_post'],
  //       order: { order: 'ASC' },
  //     });
  //   }
  //   return menus;
  // }
  
  // async sendMainMenu(ctx: any, parentId?: number): Promise<void> {
  //   const menus = await this.getMainMenu(parentId);
  //   const keyboard = menus.map(menu => [{ text: menu.name }]);
  //   await ctx.reply('„Éú„Çø„É≥„ÇíÈÅ∏Êäûüëá', {
  //     reply_markup: { keyboard, resize_keyboard: true, one_time_keyboard: false },
  //   });
  // }

  

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é –ø–æ parentId
    async getMenuById(menuId: number): Promise<MenuTable | null> {
      const menu = await this.menuTableRepository.findOne({
        where: { id: menuId },
        relations: ['linked_post'],
      });
      console.log(`[MenuService] –ú–µ–Ω—é —Å ID=${menuId}:`, menu);
      return menu;
    }
    async getSubMenusByParentId(parentId: number): Promise<MenuTable[]> {
      const subMenus = await this.menuTableRepository.find({
        where: { parentId, isActive: true }, // –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ isActive
        order: { order: 'ASC' },
      });
      console.log(`[MenuService] –î–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –¥–ª—è parentId=${parentId}:`, subMenus);
      return subMenus;
    }
    async getLastMenu(userId: number): Promise<MenuTable | null> {
      const session = this.userSessions.get(userId);
      if (session?.lastMenuId) {
        return this.getMenuById(session.lastMenuId);
      }
      return null;
    }

    async getMainBtnMenu(): Promise<MenuTable[]> {
      return this.menuTableRepository.find({
        where: { parentId: IsNull() },
        order: { order: 'ASC' },
      });
    }
    
    async getSubBtnMenu(): Promise<MenuTable[]> {
      return this.menuTableRepository.find({
        where: { parentId: Not(IsNull()) },
        order: { order: 'ASC' },
      });
    }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å—Ç–æ–º —á–µ—Ä–µ–∑ menu_post_buttons
  async getButtonsForPost(postId: number): Promise<MenuButton[]> {
    const buttons = await this.menuPostButtonRepository.find({
      where: { post: { id: postId } },
      relations: ['button'],
      order: { button: { order: 'ASC' } }, // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –ø–æ–ª—é order
    });
  
    console.log(`[MenuService] –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞ —Å ID=${postId}:`, buttons);
  
    return buttons.map((relation) => relation.button); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º–∏ –∫–Ω–æ–ø–∫–∏
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID
  async getPostById(postId: number): Promise<MenuPost | null> {
    const post = await this.menuPostRepository.findOne({
      where: { id: postId },
      relations: ['next_post', 'parent_menu'],
    });
    console.log(`[MenuService] –ü–æ—Å—Ç —Å ID=${postId}:`, post);
    return post;
  }
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ ID
  async getButtonById(buttonId: number): Promise<MenuButton | null> {
    console.log(`[MenuService] –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å ID: ${buttonId}`);
    const button = await this.menuButtonRepository.findOne({
      where: { id: buttonId },
    });
    console.log(`[MenuService] –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞:`, button);
    return button;
  }
  //–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –∫–Ω–æ–ø–∫–æ–π —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É menu_post_buttons:
  async getPostByButtonId(buttonId: number): Promise<MenuPost | null> {
    console.log(`[MenuService] –ò—â–µ–º –ø–æ—Å—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –∫–Ω–æ–ø–∫–æ–π ID=${buttonId}`);
  
    const relation = await this.menuPostButtonRepository.findOne({
      where: { button: { id: buttonId } },
      relations: ['post'],
    });
  
    if (!relation) {
      console.log(`[MenuService] –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∫–Ω–æ–ø–∫–∏ ID=${buttonId}`);
      return null;
    }
  
    console.log(`[MenuService] –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ ID=${buttonId}:`, relation.post);
    return relation.post;
  }

  private userSessions = new Map<number, { lastMenuId: number }>(); // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è

  async setLastMenu(userId: number, menuId: number): Promise<void> {
    this.userSessions.set(userId, { lastMenuId: menuId });
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –ø–æ parentId
  async updateMenuState(parentId: number, isActive: boolean): Promise<void> {
    await this.menuTableRepository.update(
      { parentId }, // –£—Å–ª–æ–≤–∏–µ: –≤—Å–µ –ø–æ–¥–º–µ–Ω—é —Å parentId
      { isActive }  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    );
    console.log(`[MenuService] –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –¥–ª—è parentId=${parentId}: isActive=${isActive}`);
  }

  async getMaxCategorySportId(): Promise<number> {
    const result = await this.menuButtonRepository
      .createQueryBuilder('button')
      .select('MAX(button.categorySportId)', 'max')
      .where('button.categorySportId IS NOT NULL')
      .getRawOne();

    return Number(result.max);
  }
}