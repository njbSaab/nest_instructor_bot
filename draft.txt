import {
    Entity,
    PrimaryGeneratedColumn,
    Column,
    OneToOne,
    JoinColumn,
    CreateDateColumn,
    UpdateDateColumn,
  } from 'typeorm';
  import { User } from './user.entity';
  
  /**
   * –¢–∞–±–ª–∏—Ü–∞ users_sport (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
   * 
   * –ó–¥–µ—Å—å —Ö—Ä–∞–Ω–∏–º —Ñ–ª–∞–≥–∏ –ø–æ–¥–ø–∏—Å–æ–∫:
   *  - football
   *  - basketball
   *  - box (–±–æ–∫—Å)
   *  - ufc
   */
  @Entity('users_sport')
  export class UserSports {
    @PrimaryGeneratedColumn()
    id: number; // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π PK —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
  
    // –°–≤—è–∑—å "–æ–¥–∏–Ω –∫ –æ–¥–Ω–æ–º—É" —Å —Ç–∞–±–ª–∏—Ü–µ–π `users`
    // –ö–∞–∂–¥—ã–π UserSports —Å–≤—è–∑–∞–Ω —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º User
    @OneToOne(() => User, { onDelete: 'CASCADE' })
    @JoinColumn({ name: 'userId' }) // —Å—Ç–æ–ª–±–µ—Ü userId –≤ —Ç–∞–±–ª–∏—Ü–µ users_sport
    user: User;
  
    @Column({ type: 'boolean', default: false })
    football: boolean;
  
    @Column({ type: 'boolean', default: false })
    basketball: boolean;
  
    @Column({ type: 'boolean', default: false })
    box: boolean;
  
    @Column({ type: 'boolean', default: false })
    ufc: boolean;
  
    @CreateDateColumn()
    created_at: Date;
  
    @UpdateDateColumn()
    updated_at: Date;
  }




  Select: users_sport
Select data Show structure Alter table New item

Select
 Search
 Sort
 Limit
50
 Action
SELECT * FROM `users_sport` LIMIT 50 (0.000 s) Edit

 Modify	id	football	basketball	box	ufc	created_at	updated_at	userId
 edit	1	1	1	1	1	2025-02-11 13:59:37.737963	2025-02-14 11:02:07.000000	7066816061
 edit	2	1	1	1	1	2025-02-14 08:51:34.010111	2025-02-14 08:51:50.000000	7166741351
 edit	3	1	1	1	1	2025-02-14 09:59:33.680010	2025-02-14 10:46:37.000000	5075411916
Whole result
3 rows Modify
 Selected (0)
  
 Export (3)






import {
    Entity,
    PrimaryColumn,
    Column,
    CreateDateColumn,
    UpdateDateColumn,
    OneToOne,
  } from 'typeorm';
  import { UserSports } from './users-sport.entity';
  @Entity('users')
  export class User {
    @PrimaryColumn({ type: 'bigint' })
    id: number; // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
  
    @Column({ type: 'boolean', default: false })
    is_bot: boolean; // –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç–æ–º
  
    @Column({ type: 'varchar', length: 255 })
    first_name: string; // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
    @Column({ type: 'varchar', length: 255, nullable: true })
    last_name: string; // –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
    @Column({ type: 'varchar', length: 255, nullable: true })
    username: string; // –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    @Column({ type: 'varchar', length: 255, nullable: true })
    email: string; // –§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  
    @Column({ type: 'varchar', length: 10, nullable: true })
    language_code: string; // –ö–æ–¥ —è–∑—ã–∫–∞
  
    @Column({ type: 'boolean', default: false })
    can_join_groups: boolean; // –ú–æ–∂–µ—Ç –ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–∞–º
  
    @Column({ type: 'boolean', default: false })
    can_read_all_group_messages: boolean; // –ú–æ–∂–µ—Ç –ª–∏ —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  
    @Column({ type: 'boolean', default: false })
    supports_inline_queries: boolean; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å—ã
  
    @Column({ type: 'varchar', length: 50, default: 'default' })
    state: string; // –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  
    @Column({ type: 'timestamp', nullable: true })
    last_active: Date; // –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  
    @OneToOne(() => UserSports, (userSports) => userSports.user)
    userSports: UserSports;

    @Column({ type: 'boolean', default: false })
    isNewsActive: boolean;

    @CreateDateColumn()
    created_at: Date; // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
  
    @UpdateDateColumn()
    updated_at: Date; // –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
  }






  Select: users
Select data Show structure Alter table New item

Select
 Search
 Sort
 Limit
50
 Text length
100
 Action
SELECT * FROM `users` LIMIT 50 (0.001 s) Edit

 Modify	id	is_bot	first_name	last_name	username	language_code	can_join_groups	can_read_all_group_messages	supports_inline_queries	state	last_active	created_at	updated_at	email	isNewsActive
 edit	1317401681	0	Nj_	NULL	Nj_s44b	ru	0	0	0	start	NULL	2025-01-23 13:42:55.104883	2025-01-23 13:42:55.104883	NULL	0
 edit	5075411916	0	Njb	NULL	Nj_Saab	ru	0	0	0	email_getted	NULL	2025-01-23 14:49:40.461118	2025-02-14 10:47:43.000000	sdr.expert@gmail.com	1
 edit	6684314409	0	Vadim_acquisition	NULL	Vadim_acquisition1	ru	0	0	0	start	NULL	2025-02-07 08:36:19.351009	2025-02-07 08:36:19.351009	NULL	0
 edit	7066816061	0	Najib	EA_tech	najib_eatech	ru	0	0	0	email_getted	NULL	2025-01-22 17:22:16.457111	2025-02-15 14:39:30.000000	sdr.expert@gmail.com	1
 edit	7166741351	0	Karina PM EA	üáØüáµüá∞üá∑üáªüá≥üá≠üá∞üáπüáº	Karina_PM_EA	en	0	0	0	email_getted	NULL	2025-02-10 12:06:08.466722	2025-02-14 08:52:15.000000	NULL	0
Whole result
5 rows Modify
 Selected (0)
  
 Export (5)
Import








import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { In, Repository } from 'typeorm';
import { NewsUser } from '../../entities/news-user.entity'; // –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å

@Injectable()
export class UserNewsService {
  constructor(
    @InjectRepository(NewsUser)
    private readonly newsUserRepository: Repository<NewsUser>,
  ) {}

  async getNewsByCategories(subscriptions: { football: boolean, basketball: boolean, box: boolean, ufc: boolean }): Promise<NewsUser[]> {
    // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const categories = [];
    if (subscriptions.football) categories.push('football');
    if (subscriptions.basketball) categories.push('basketball');
    if (subscriptions.box) categories.push('box');
    if (subscriptions.ufc) categories.push('ufc');
    
    if (categories.length === 0) return [];
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≥–¥–µ isActive = true
    return this.newsUserRepository.find({
      where: { category: In(categories), isActive: true },
      order: { created_at: 'DESC' },
    });
  }
}




import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { In, Repository } from 'typeorm';
import { NewsUser } from '../../entities/news-user.entity'; // –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å

@Injectable()
export class UserNewsService {
  constructor(
    @InjectRepository(NewsUser)
    private readonly newsUserRepository: Repository<NewsUser>,
  ) {}

  async getNewsByCategories(subscriptions: { football: boolean, basketball: boolean, box: boolean, ufc: boolean }): Promise<NewsUser[]> {
    // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const categories = [];
    if (subscriptions.football) categories.push('football');
    if (subscriptions.basketball) categories.push('basketball');
    if (subscriptions.box) categories.push('box');
    if (subscriptions.ufc) categories.push('ufc');
    
    if (categories.length === 0) return [];
    
    // –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —ç—Ç–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –≥–¥–µ isActive = true
    return this.newsUserRepository.find({
      where: { category: In(categories), isActive: true },
      order: { created_at: 'DESC' },
    });
  }
}




    // –ï—Å–ª–∏ —ç—Ç–æ –æ–ø—Ä–æ—Å–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ (categorySportId != 0)
    if (button.categorySportId) {
      const userId = ctx.from.id;
      const categoryId = button.categorySportId; // 1=football, 2=basketball, 3=box, 4=ufc
      const isYes = button.name.includes('yes'); // –∏–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å '‚úÖ yes'
      
      await this.userSportsService.updateUserSport(userId, categoryId, isYes);
      await ctx.reply(isYes ? '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å!' : '–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å!');
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å (–∫–∞—Ç–µ–≥–æ—Ä–∏—è 4), –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è email
      // –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ categorySportId –∏–∑ –±–∞–∑—ã
      const maxCategoryId = await this.menuService.getMaxCategorySportId();
      if (categoryId === maxCategoryId) {
        await this.usersService.updateUserState(userId, 'awaiting_email');
        await ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!`);
        await new Promise(resolve => setTimeout(resolve, 1000));
        await ctx.reply(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ú—ã –ø—Ä–∏—à–ª–µ–º –í–∞–º –∫–æ–¥ –Ω–∞ –ø–æ—á—Ç—É.`);
        await new Promise(resolve => setTimeout(resolve, 1000));
        await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email:`);

        await ctx.answerCbQuery();
        return;
      }
      
      await ctx.answerCbQuery();
    }